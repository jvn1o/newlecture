*Tomcat

서블릿 코드 & URL 매핑:
클래스를 직접 연결하지 않고, 사용자에게 명시하지도 않는다.
사용자에게 요청을 받으면 실행을 대신 해주는 구조이다.

HTML - XML 차이점:
HTML은 웹 페이지를 구성하는데 쓰이는 마크업 고정된 언어이다.
마크업 언어가 이미 정해져있고 이를 이용하여 표현하는 것에 목적을 둔다.
특징으로는 대소문자를 신경쓰지 않으며, 태그를 닫는 것이 선택적이다.
이에 반해 XML은 태그*를 사용자가 정의할 수 있으며(well-formed, 즉 폼의 구조만 지켜주면 된다) 
데이터 교환이 주 목적이다.
또한 대소문자를 구분해주어야 하고 태그를 필수적으로 닫아줘야 한다는 특징이 있다.
(태그*란 데이터를 구분짓기 위한 표현방법, 데이터의 중첩이 어렵고 식별이 어렵다는 단점도 보완해줌)
#"JSON"이라는 표현방법 알아보기

설정 데이터:
프로그램이 종료된 후 저장되는 데이터, 프로그램 초기 파일에 있거나 윈도우 레지스트리에 저장된다.

MVC:
Model View Controller 로 이루어진 소프트웨어 디자인 패턴,
Controller가 사용자로부터 Request를 받고 Service에서 처리하여 결과를 Model에 저장, 이후 View에 전달하는 분리자 역할을 한다.
Model은 Controller로 부터 받은 데이터를 가공(조작)하는 역할을 수행한다.
View는 Controller로 부터 전해받은 Model의 데이터를 사용자에게 시각적으로 보여주는 역할을 수행한다.
(*유의사항)
1. Model의 독립성: Controller or View에 의존하면 안되고 Model 내부에 이러한 코드가 있으면 안된다.
2. View의 Model 의존: View 내부에 Model의 코드만 있을 수 있고, Controller의 코드가 있어서는 안된다. 즉 Model을 거친 데이터만을 취급해야 한다.
3. View가 취급하는 데이터: 사용자마다 다르게 보여주어야 하는 데이터만 취급해야 한다.
4. View가 취급하는 데이터(2): Model로부터 데이터를 받을 때, Controller로부터 시작된 데이터를 받아야 한다.
5. Controlle의 Model & View 의존: 내부에 Model & View의 코드가 존재 가능


12회차 조별 스터디 (개인 과제)


톰캣 server.xml 설정 파일에 Host 설정에서 localhost 안에  aa 이름의 context 를 추가했다 그리고 그것의 홈 디렉토리에 index.html 을 두었다. 그러면 웹 클라이언트가 index.html을 요청하기 위한 전체 URL은 어떻게 되는가?:
http://localhost:8080/aa/index.html

Nana.java 서블릿 코드 파일을 배포할 때 다음 단계를 따른다. 빈 칸을 채우시오.:
javac 에 컴파일 옵션 [-cp]를 넣고 servlet-api.jar 라이브러리 경로를 설정해서 컴파일한다.  
aa 컨텍스트 홈디렉토리에 [classes] 경로를 만들고 Nana.class 파일을 배포한다.
web.xml에 Nana 클래스와 URL을 매핑하기 위한 설정을 한다. 매핑할 주소는 “/hi” 이며 서블릿 이름은 nana로 할 것

<servlet>
	<servlet-name>nana</servlet-name>
  <servlet-class>Nana</ servlet-class  >
</servlet>
<servlet-mapping>
	<servlet-name>nana</servlet-name>
  <url-pattern>/hi</url-pattern>
</servlet-mapping>
톰캣을 재시작한다.
브라우저를 열고 주소 입력란에 [http://localhost:8080/aa/hi]를 입력해서 Nana.class의 실행 결과를 받는다.


서블릿과 URL을 매핑할 때 web.xml에서는 서블릿 이름을 설정한다. 그런데 그냥 URL과 서블릿을 하나로 묶으면 될 것을 굳이 둘로 나누었을까? 그리고 왜 서블릿의 이름이 필요했을까? 그 용도를 본인 또는 조의 생각으로 유추해보시오? (사실 이 내용은 그 닥 중요하지는 않다. 몰라도 웹개발 잘 할 수 있다.  다만 이런 스스로의 물음이 어떤 라이브러리를 사용할 때 미루어 짐작할 수 있는 습관을 만들고 나중에 알게되었을 때 사고를 확장하게 한다.) :
서블릿과 매핑이 각각 가지는 기능이 유의미하기 때문이다


앞 문제에서 web.xml에 작성한 내용을 우리는 서블릿 설정이라고 한다. 여기서 설정이란 무엇이고 web.xml에 설정한 것은 누가 사용하는 설정인가?:
tomcat이 사용하는 설정이다.
Tomcat root폴더의 설정을 오버라이드 하여 공용 설정이 아닌 aa context의 서블릿 설정을 변경한 것.


웹 어플리케이션을 만들고 우리는 그것을 배포한다. 여기서 배포란 무엇을 의미하는 말인가?:
접근할 수 있게 제공하는 것.
	

배포한 서블릿 파일은 웹클라이언트가 원격으로 실행할 수 있다.  그럼 클라이언트의 요청이 있을 때 요청을 시작으로 서블릿이 실행되고 사라질 때까지의 과정을 설명하시오.:
(AI 검색이나 웹 검색 모두 활용할 것. 그리고 조원 누구에게 물어봐도 그 과정을 설명할 수 있게 할 것):

1. 사용자가 웹 브라우저를 통해 http 요청한다.
2. Tomcat 서버가 요청을 수신한다.
3. 수신한 요청 URL을 분석하여 context(Web Application)를 결정한다.
4. web.xml 파일과 annotation에 매핑된 서블릿을 찾는다.
5. 서블릿의 service 메서드를 호출하여 요청을 처리한다.
6. HttpServiceResponse 객체를 통해 응답을 작성한다.
(상태 코드 설정, 헤더 설정, 본문 작성, 리다이렉트 및 에러 처리 등)
7. 최종적으로 생성된 응답을 클라이언트에게 전송하여 웹 브라우저에 표시한다.
8. 다음 요청을 수신하기 위해 사용한 자원을 정리 후 준비한다.


서블릿을 개발할 때 URL 매핑 설정은 XML이나 Annotaion 두 가지로 선택적으로 설정할 수 있다. Annotation으로 설정하는 것이 트랜드일 뿐만 아니라 여러 가지 장점을 가지고 있다. 그 장점들을 본인 또는 조가 느끼는 모든 경우를 다 쓰시오.:
소스코드와 함께 수정해야 할 경우에는 코드에 설정을 붙혀야한다.


톰캣을 시작한 후에 aa 컨텍스트의 홈디렉토리에 있는 index.html을 요청하였다. 그러자 다음 오류가 발생하였다.  어떤 파일을 잘못 건드렸을 가능성이 있나?:
Domain Name을 잘못 입력한 경우 ex) rocalhost:8080


윗 문제와 동일한 환경에서 다음 오류가 발생하였다. 이번에는 404 오류가 발생하였다. 어떤 파일을 잘못 건드렸을 가능성이 있나?:
웹브라우저에 url에 입력한 주소가 Server.xml에 context에 경로 혹은 web.xml에 경로가 틀렸을경우


web.xml 은 XML 규칙을 따른다. XML에서의 구문규칙을 Well Formed 라고 부르기도 한다. 그렇다면 Well Formed라는 규칙에서 가장 기본이되는 규칙은 무엇이며 SGML은 Well Formed 하지 않다는 말인지 생각해보고 본인의 생각을 쓰시오.:
Well Formed에서 기본이 되는 규칙으로는 태그를 필수적으로 닫아줘야 한다는 것이다. SGML이 태그를 닫지 않기 때문에 Well Formed 하지 않다고 말하는 것 같다.	

다음은 데이터를 표현하기 위한 다양한 표현방법들이다. 각각의 장/단점을 쓰시오.:
CSV - 단순한 데이터 저장과 처리에 용이함 / 특수문자 처리나 대용량 정보 처리에 
XML - 복잡한 데이터 저장에 적합함 / 파일 크기나 성능 처리에 있어서는 비효율적
JSON - 사람이 이해하기 가장 쉽다 전송 속도가 매우 빠르다/ 이스케이프를 사용해야한다 보안에 취약하며 utf-8인코딩만 지원


다음은 데이터를 Markup 하기 위해 태그를 사용하는 언어들이며. 메타 언어와 그것의 서브셋들로 이루어져 있다. 메타 언어를 모두 고르시오.:
XML
HTML
XHTML
SGML <-

HTML과 XHTML의 차이점은 무엇인지 아는대로 쓰시오.:
HTML는 문법을 안지켜도 실행이 되지만 Xhtml는 실행되지 않는다
HTML은 웹 페이지를 표시하기 위한 목적을 주로 사용한다.
XHTML은 데이터 교환, 설정 파일의 목적을 주로 사용한다.
